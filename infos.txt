1. To check if checkbox is checked
/*const todoCheckBoxes = document.querySelector('#todo-entry1-checkbox');
console.log(todoCheckBoxes.checked);
if (todoCheckBoxes.checked) {
  console.log("Checked");
} else {
  console.log("Not Checked");
}*/

2. LOOP THRU mainTodos for other Projects
//Loop through keys of mainTodos => categories
const todoCategories = Object.keys(mainTodos);
//console.log(todoCategories);
for (todoCategory of todoCategories) {
  console.log(todoCategory);
  const pattern = /`${todoCategory}`/i;
}

3. to make variable available outside an eventlistener function, declare the variable globally with null as its value
Then have it returned by the addeventlistener function

4. editcatalog function reference

function renderEdit(e, todos) {

        const element = e.target;
        // sometimes the event target is the svg element, other times it is the use element.
        // this ensures i get index of the to-do body item 
        let i;
        let project;

        if (element.tagName === 'svg') {
            i = element.parentElement.dataset.index;
        } else if (element.tagName === 'use') {
            i = element.parentElement.parentElement.dataset.index;
        }

        if (element.tagName === 'svg') {
            project = element.parentElement.dataset.project;
        } else if (element.tagName === 'use') {
            project = element.parentElement.parentElement.dataset.project;
        }

        const overlay = document.querySelector('.overlay-edit');
        const display = document.querySelector('.edit-popup__entry');
        const popup = document.querySelector('.edit-popup');

        // clear out the popup edit information
        display.innerHTML = "";

        // retreive name of todo and display it in a text area
        const title = document.createElement('textarea');
        title.classList.add('edit-popup__input');
        title.setAttribute('maxlength', '40');
        title.required = true;
        title.textContent = todos[i].name;
        // attatch index to title element so i can grab it when confirming edit
        // and change the array data for that to-do item
        title.dataset.index = i;
        // attach project name to title element so i can grab it when confirming edits
        title.dataset.project = project;

        // retreive details of todo and display it in a text area
        const details = document.createElement('textarea');
        details.classList.add('edit-popup__input', 'edit-popup__input-big');
        details.setAttribute("placeholder", "Details:")
        details.textContent = todos[i].details;

        // create the elements that make up the date section
        const dateContainer = document.createElement('div');
        dateContainer.classList.add('edit-popup__date');

        const dateContainerTitle = document.createElement('div');
        dateContainerTitle.classList.add('edit-popup__date-title');
        dateContainerTitle.textContent = 'Due Date:';

        const dateContainerInput = document.createElement('input');
        dateContainerInput.classList.add('edit-popup__date-input');
        dateContainerInput.setAttribute('type', 'date');
        dateContainerInput.required = true;
        dateContainerInput.setAttribute('value', todos[i].date);

        dateContainer.appendChild(dateContainerTitle);
        dateContainer.appendChild(dateContainerInput);

        // create the priority buttons section
        const footer = document.createElement('div');
        footer.classList.add('edit-popup__wrapper-priority-submit');

        const priorityContainer = document.createElement('div');
        priorityContainer.classList.add('edit-popup__priority');

        const priorityTitle = document.createElement('div');
        priorityTitle.classList.add('edit-popup__priority-title');
        priorityTitle.textContent = 'Priority:';
        // low priority input
        const priorityLowInput = document.createElement('input');
        priorityLowInput.setAttribute('type', 'radio');
        priorityLowInput.setAttribute('id', 'low');
        priorityLowInput.setAttribute('name', 'edit-priority');
        priorityLowInput.setAttribute('value', 'low');
        if (todos[i].priority === 'low') {
            priorityLowInput.checked = true;
        }
        priorityLowInput.required = true;
        // low priority label
        const priorityLowLabel = document.createElement('label');
        priorityLowLabel.setAttribute("for", "low");
        priorityLowLabel.classList.add('edit-popup__priority-btn', 'edit-popup__priority-btn--low');
        if (todos[i].priority === 'low') {
            priorityLowLabel.classList.add('edit-popup__priority-btn--low-active');
        }
        priorityLowLabel.textContent = "Low";
        // medium priority input
        const priorityMediumInput = document.createElement('input');
        priorityMediumInput.setAttribute('type', 'radio');
        priorityMediumInput.setAttribute('id', 'medium');
        priorityMediumInput.setAttribute('name', 'edit-priority');
        priorityMediumInput.setAttribute('value', 'medium');
        if (todos[i].priority === 'medium') {
            priorityMediumInput.checked = true;
        }
        priorityMediumInput.required = true;
        // Medium priority label
        const priorityMediumLabel = document.createElement('label');
        priorityMediumLabel.setAttribute("for", "medium");
        priorityMediumLabel.classList.add('edit-popup__priority-btn', 'edit-popup__priority-btn--medium');
        if (todos[i].priority === 'medium') {
            priorityMediumLabel.classList.add('edit-popup__priority-btn--medium-active');
        }
        priorityMediumLabel.textContent = "Medium";
        // high priority input
        const priorityHighInput = document.createElement('input');
        priorityHighInput.setAttribute('type', 'radio');
        priorityHighInput.setAttribute('id', 'high');
        priorityHighInput.setAttribute('name', 'edit-priority');
        priorityHighInput.setAttribute('value', 'high');
        if (todos[i].priority === 'high') {
            priorityHighInput.checked = true;
        }
        priorityHighInput.required = true;
        // high priority label
        const priorityHighLabel = document.createElement('label');
        priorityHighLabel.setAttribute("for", "high");
        priorityHighLabel.classList.add('edit-popup__priority-btn', 'edit-popup__priority-btn--high');
        if (todos[i].priority === 'high') {
            priorityHighLabel.classList.add('edit-popup__priority-btn--high-active');
        }
        priorityHighLabel.textContent = "High";

        

        priorityContainer.appendChild(priorityTitle);
        priorityContainer.appendChild(priorityLowInput);
        priorityContainer.appendChild(priorityLowLabel);
        priorityContainer.appendChild(priorityMediumInput);
        priorityContainer.appendChild(priorityMediumLabel);
        priorityContainer.appendChild(priorityHighInput);
        priorityContainer.appendChild(priorityHighLabel);

        // submit button (is in same footer as the piority buttons container)
        const submit = document.createElement("input");
        submit.setAttribute('type', "submit");
        submit.setAttribute('id', 'todo-edit-submit')
        submit.setAttribute('value', 'Confirm Edit')
        submit.classList.add("edit-popup__todo-submit");

        footer.appendChild(priorityContainer);
        footer.appendChild(submit);

        // append created elements to the DOM
        display.appendChild(title);
        display.appendChild(details);
        display.appendChild(dateContainer);
        display.appendChild(footer);

        //listener that changes the highlighted priority button
        const priorityBtns = document.querySelectorAll('.edit-popup__priority-btn');
        priorityBtns.forEach(btn => {
            btn.addEventListener('click', e =>{
                editPriority(e);
            });
        })


        // show popup
        popup.classList.toggle("edit-popup-open");
        overlay.classList.toggle("overlay-edit-invisible");

    }


//edit dialog panel 
  var edit_todo_entry_node_1 = document.createElement('DIALOG');
  edit_todo_entry_node_1.setAttribute('class', 'edit-todo-popup');
  edit_todo_entry_node_1.setAttribute('id', `edit-todo-entry${index}`);
  todo_entry_node_2.appendChild(edit_todo_entry_node_1);

  var edit_todo_entry_node_2 = document.createElement('FORM');
  edit_todo_entry_node_2.setAttribute('class', 'edit-todo-popup-form');
  edit_todo_entry_node_2.setAttribute('id', `edit-todo-entry${index}-form`);
  edit_todo_entry_node_1.appendChild(edit_todo_entry_node_2);

  var edit_todo_entry_node_3 = document.createElement('DIV');
  edit_todo_entry_node_3.setAttribute('class', 'edit-todo');
  edit_todo_entry_node_2.appendChild(edit_todo_entry_node_3);

  var edit_todo_entry_node_4 = document.createElement('DIV');
  edit_todo_entry_node_4.setAttribute('class', 'edit-todo-header');
  edit_todo_entry_node_3.appendChild(edit_todo_entry_node_4);

  var edit_todo_entry_node_5 = document.createElement('P');
  edit_todo_entry_node_5.textContent = "EDIT TODO";
  edit_todo_entry_node_4.appendChild(edit_todo_entry_node_5);

  var edit_todo_entry_node_7 = document.createElement('DIV');
  edit_todo_entry_node_7.setAttribute('class', 'edit-todo-panel');
  edit_todo_entry_node_3.appendChild(edit_todo_entry_node_7);

  var edit_todo_entry_node_8 = document.createElement('DIV');
  edit_todo_entry_node_8.setAttribute('class', 'todo-text-input');
  edit_todo_entry_node_7.appendChild(edit_todo_entry_node_8);

  var edit_todo_entry_node_9 = document.createElement('TEXTAREA');
  edit_todo_entry_node_9.setAttribute('class', 'todo-edit-title');
  edit_todo_entry_node_9.setAttribute('id', `edit-todo-entry${index}-title`);
  edit_todo_entry_node_9.setAttribute('name', 'edit-todo-title');
  edit_todo_entry_node_9.setAttribute('maxlength', '40');
  edit_todo_entry_node_9.setAttribute('placeholder', 'Task Title: Pay bills');
  edit_todo_entry_node_9.setAttribute('required', '');
  edit_todo_entry_node_9.textContent = `${title}`;
  edit_todo_entry_node_8.appendChild(edit_todo_entry_node_9);

  var edit_todo_entry_node_10 = document.createElement('TEXTAREA');
  edit_todo_entry_node_10.setAttribute('class', 'todo-edit-description');
  edit_todo_entry_node_10.setAttribute('id', `edit-todo-entry${index}-description`);
  edit_todo_entry_node_10.setAttribute('name', 'edit-todo-description');
  edit_todo_entry_node_10.setAttribute('maxlength', '1000');
  edit_todo_entry_node_10.setAttribute('placeholder', 'Description: Electric Bills, Wi-Fi, etc.');
  //edit_todo_entry_node_10.setAttribute('required', ''); due to some todo has no description
  edit_todo_entry_node_10.textContent = `${description}`;
  edit_todo_entry_node_8.appendChild(edit_todo_entry_node_10);

  var edit_todo_entry_node_11 = document.createElement('DIV');
  edit_todo_entry_node_11.setAttribute('class', 'todo-edit-date-and-prio-input');
  edit_todo_entry_node_7.appendChild(edit_todo_entry_node_11);

  var edit_todo_entry_node_12 = document.createElement('LABEL');
  edit_todo_entry_node_12.setAttribute('class', 'todo-edit-due-date-title');
  edit_todo_entry_node_12.setAttribute('for', `edit-todo-entry${index}-due-date`);
  edit_todo_entry_node_12.textContent = "Due Date: ";
  edit_todo_entry_node_11.appendChild(edit_todo_entry_node_12);

  var edit_todo_entry_node_13 = document.createElement('INPUT');
  edit_todo_entry_node_13.setAttribute('type', 'date');
  edit_todo_entry_node_13.setAttribute('class', 'todo-edit-due-date-input');
  edit_todo_entry_node_13.setAttribute('id', `edit-todo-entry${index}-due-date`);
  edit_todo_entry_node_13.setAttribute('name', 'edit-todo-entry-due-date');
  edit_todo_entry_node_13.setAttribute('required', '');
  edit_todo_entry_node_13.setAttribute('value', `${date}`);
  edit_todo_entry_node_12.appendChild(edit_todo_entry_node_13);

  var edit_todo_entry_node_14 = document.createElement('DIV');
  edit_todo_entry_node_14.setAttribute('class', 'priority-input-edit-todo');
  edit_todo_entry_node_11.appendChild(edit_todo_entry_node_14);

  var edit_todo_entry_node_15 = document.createElement('P');
  edit_todo_entry_node_15.setAttribute('class', 'edit-todo-priority-title');
  edit_todo_entry_node_15.textContent = "Prioritry Level: ";
  edit_todo_entry_node_14.appendChild(edit_todo_entry_node_15);

  var edit_todo_entry_node_16 = document.createElement('INPUT');
  edit_todo_entry_node_16.setAttribute('type', 'radio');
  edit_todo_entry_node_16.setAttribute('class', 'todo-priority-low');
  edit_todo_entry_node_16.setAttribute('id', `edit-todo-entry${index}-priority-low`);
  edit_todo_entry_node_16.setAttribute('name', `edit-todo-entry${index}-priority`);
  edit_todo_entry_node_16.setAttribute('value', 'LOW');
  edit_todo_entry_node_16.setAttribute('required', '');
  if (priority == "LOW") {
  edit_todo_entry_node_16.setAttribute('checked', '');
  }
  edit_todo_entry_node_14.appendChild(edit_todo_entry_node_16);

  var edit_todo_entry_node_17 = document.createElement('LABEL');
  edit_todo_entry_node_17.setAttribute('class', 'todo-priority-label-low');
  edit_todo_entry_node_17.setAttribute('for', `edit-todo-entry${index}-priority-low`);
  edit_todo_entry_node_17.textContent = "LOW";
  edit_todo_entry_node_14.appendChild(edit_todo_entry_node_17);

  var edit_todo_entry_node_19 = document.createElement('INPUT');
  edit_todo_entry_node_19.setAttribute('type', 'radio');
  edit_todo_entry_node_19.setAttribute('class', 'todo-priority-mid');
  edit_todo_entry_node_19.setAttribute('id', `edit-todo-entry${index}-priority-mid`);
  edit_todo_entry_node_19.setAttribute('name', `edit-todo-entry${index}-priority`);
  edit_todo_entry_node_19.setAttribute('value', 'MID');
  edit_todo_entry_node_19.setAttribute('required', '');
  if (priority == "MID") {
    edit_todo_entry_node_19.setAttribute('checked', '');
  }
  edit_todo_entry_node_14.appendChild(edit_todo_entry_node_19);

  var edit_todo_entry_node_20 = document.createElement('LABEL');
  edit_todo_entry_node_20.setAttribute('class', 'todo-priority-label-mid');
  edit_todo_entry_node_20.setAttribute('for', `edit-todo-entry${index}-priority-mid`);
  edit_todo_entry_node_20.textContent = "MID";
  edit_todo_entry_node_14.appendChild(edit_todo_entry_node_20);

  var edit_todo_entry_node_22 = document.createElement('INPUT');
  edit_todo_entry_node_22.setAttribute('type', 'radio');
  edit_todo_entry_node_22.setAttribute('class', 'todo-priority-high');
  edit_todo_entry_node_22.setAttribute('id', `edit-todo-entry${index}-priority-high`);
  edit_todo_entry_node_22.setAttribute('name', `edit-todo-entry${index}-priority`);
  edit_todo_entry_node_22.setAttribute('value', 'HIGH');
  edit_todo_entry_node_22.setAttribute('required', '');
  if (priority == "HIGH") {
    edit_todo_entry_node_22.setAttribute('checked', '');
  }
  edit_todo_entry_node_14.appendChild(edit_todo_entry_node_22);

  var edit_todo_entry_node_23 = document.createElement('LABEL');
  edit_todo_entry_node_23.setAttribute('class', 'todo-priority-label-high');
  edit_todo_entry_node_23.setAttribute('for', `edit-todo-entry${index}-priority-high`);
  edit_todo_entry_node_23.textContent = "HIGH";
  edit_todo_entry_node_14.appendChild(edit_todo_entry_node_23);

  var edit_todo_entry_node_25 = document.createElement('BUTTON');
  edit_todo_entry_node_25.setAttribute('class', 'todo-editor');
  edit_todo_entry_node_25.setAttribute('id', 'confirm');
  edit_todo_entry_node_25.setAttribute('type', 'submit');
  edit_todo_entry_node_25.setAttribute('value', 'default');
  edit_todo_entry_node_11.appendChild(edit_todo_entry_node_25);

  var edit_todo_entry_node_26 = document.createElement('IMG');
  edit_todo_entry_node_26.setAttribute('src', './images/check.svg');
  edit_todo_entry_node_26.setAttribute('alt', 'check-icon');
  edit_todo_entry_node_25.appendChild(edit_todo_entry_node_26);

  var edit_todo_entry_node_27 = document.createElement('BUTTON');
  edit_todo_entry_node_27.setAttribute('class', 'cancel');
  edit_todo_entry_node_27.setAttribute('id', 'cancel-edit-todo');
  edit_todo_entry_node_27.textContent = "X";
  edit_todo_entry_node_11.appendChild(edit_todo_entry_node_27);


  //get all childNodes of todo catalog entry
      const clickedTodoEntryChildren = clickedDelete.parentNode.childNodes;
      //splice respective entry on object
      clickedTodoEntryChildren.forEach(function(clickedTodoEntryChild, index) {
        if(clickedTodoEntryChild.classList.contains('todo-catalog-title-default')||
        clickedTodoEntryChild.classList.contains('todo-catalog-title-checked')) {
          //console.log(clickedTodoEntryChild);
          //console.log(clickedTodoEntryChild.textContent);
          for (let i = 0; i < currentTodoObject.length; i++) {
            if(currentTodoObject[i].title == clickedTodoEntryChild.textContent) {
              console.log(`Successfully removed ${currentTodoObject[i]} entry`);
              currentTodoObject.splice(i, 1);
            }
          }
        }
      });

      mainPanel.removeChild(tobeRemovedTodoCatalog);
      console.log(currentTodoObject);
      const childNodes = mainPanel.childNodes;

      Array.from(childNodes).forEach(child => {
        mainPanel.removeChild(child);
      });
      currentTodoObject.forEach(function(entry, index) {
        //console.log(entry);
        let category = `${todoCategory}`;
        displayTodoCatalogEntry (index, entry.title, entry.date, category, entry.description, entry.priority, entry.status);
      });